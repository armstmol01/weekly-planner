Root dir:
- npm install, npm init
- npx create-react-app client
- package.json:
  scripts : {
    "start" : "concurrently \"node index.js\" \"cd client && npm start\"",
    "heroku-postbuild": "cd client && npm install && npm run build" }
- dependencies/modules
  - concurrently
  - express
  - path
  - pg

Client dir:
- package.json:
  "proxy": "http://localhost:5000"
- dependencies/modules
  - react-router-dom
  - react-icons
  - axios

Heroku Setup
- heroku login
- heroku create <domain-name>
- heroku apps:rename --app OLDNAME NEWNAME
- heroku auth:whoami (get username)

Heroku Database
- heroku addons:create heroku-postgresql:hobby-dev
- npm install pg (node postgres)
- index.js:
  // to avoid proxy errors, configure SSL for development and production env
  const pool = (() => {
  if (process.env.NODE_ENV !== 'production') {
      return new Pool({
          connectionString: 'postgresql://postgres:molly2001@localhost:5432/werkweek',
          ssl: false
      });
  } else {
      return new Pool({
          connectionString: process.env.DATABASE_URL,
          ssl: {
            rejectUnauthorized: false
          }
      });
  } })();
- set DATABASE_URL=postgres://$(whoami) (for local dev)
  - postgresql://postgres:molly2001@localhost:5432/werkweek
- heroku pg:psql (interact w/ db), \q to quit

Heroku Config Vars & .env File
- heroku config (list config vars, heroku version of .env)
  - .gitignore ".env" b/c only for local use
  - development mode is typically great for development,
    itâ€™s not so great for production cuz it can degrade performance
- heroku config:get CONFIG_VAR
- heroku config:set CONFIG_VAR=joesmith
- heroku config:unset CONFIG_VAR
- access config vars in code: process.env.CONFIG_VAR

Run Locally
- heroku local web (runs on port 5000)

Open Website Running Remote
- heroku open

Update App
- git push heroku main (or master)