Root dir:
- npm install, npm init
- npx create-react-app client
- package.json:
  scripts : {
    "start" : "concurrently \"node index.js\" \"cd client && npm start\"",
    "heroku-postbuild": "cd client && npm install && npm run build" }
- dependencies/modules
  - concurrently
  - express

Client dir:
- package.json:
  "proxy": "http://localhost:5000"

Heroku Setup
- heroku login
- heroku create <domain-name>
- heroku apps:rename --app OLDNAME NEWNAME
- heroku auth:whoami (get username)

Heroku Database
- heroku addons:create heroku-postgresql:hobby-dev
- npm install pg (node postgres)
- index.js:
  const { Pool } = require('pg');
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false
    }
  });
- set DATABASE_URL=postgres://$(whoami) (for local dev)
- heroku pg:psql (interact w/ db)

Heroku Config Vars & .env File
- heroku config (list config vars, heroku version of .env)
  - .gitignore ".env" b/c only for local use
  - development mode is typically great for development,
    itâ€™s not so great for production cuz it can degrade performance
- heroku config:get CONFIG_VAR
- heroku config:set CONFIG_VAR=joesmith
- heroku config:unset CONFIG_VAR
- access config vars in code: process.env.CONFIG_VAR

Run Locally
- heroku local web (runs on port 5000)

Open Website Running Remote
- heroku open

Update App
- git push heroku main (or master)

Notes
- werkweek.io, werkweeks.com
- upgrade to paid Heroku by Nov 28 2022
Database Create Table Statements
create table users(
  id serial,
  username text not null,
  password text not null,
  salt text not null,
  primary key(id));

create table tasks(
  id serial,
  user_id integer not null,
  day integer not null,
  content text not null,
  CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES users(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  primary key(id));